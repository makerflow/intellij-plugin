/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package co.makerflow.client.apis

import co.makerflow.client.infrastructure.ApiClient
import co.makerflow.client.infrastructure.HttpResponse
import co.makerflow.client.infrastructure.RequestConfig
import co.makerflow.client.infrastructure.RequestMethod
import co.makerflow.client.infrastructure.wrap
import co.makerflow.client.models.BreakReason
import co.makerflow.client.models.EndedWorkBreak
import co.makerflow.client.models.WorkBreak
import com.fasterxml.jackson.databind.ObjectMapper
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine

open class BreaksApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonBlock: ObjectMapper.() -> Unit = ApiClient.JSON_DEFAULT,
) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonBlock) {

    /**
     *
     *
     * @param source To specify source of request (optional)
     * @return WorkBreak
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getOngoingBreak(source: kotlin.String?): HttpResponse<WorkBreak> {

        val localVariableAuthNames = listOf<String>("api_token")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        source?.apply { localVariableQuery["source"] = listOf("$source") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/work-break/ongoing",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     *
     *
     * @param reason Reason for the break
     * @param source To specify source of request (optional)
     * @param workdayId  (optional)
     * @return WorkBreak
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun startWorkBreak(
        reason: BreakReason,
        source: kotlin.String?,
        workdayId: kotlin.Int?
    ): HttpResponse<WorkBreak> {

        val localVariableAuthNames = listOf<String>("api_token")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        source?.apply { localVariableQuery["source"] = listOf("$source") }
        reason?.apply { localVariableQuery["reason"] = listOf(reason.name.lowercase()) }
        workdayId?.apply { localVariableQuery["workdayId"] = listOf("$workdayId") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/work-break/start",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

    /**
     *
     *
     * @param source To specify source of request (optional)
     * @return EndedWorkBreak
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun stopOngoingBeak(source: kotlin.String?): HttpResponse<EndedWorkBreak> {

        val localVariableAuthNames = listOf<String>("api_token")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        source?.apply { localVariableQuery["source"] = listOf("$source") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/work-break/stop",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }

}
